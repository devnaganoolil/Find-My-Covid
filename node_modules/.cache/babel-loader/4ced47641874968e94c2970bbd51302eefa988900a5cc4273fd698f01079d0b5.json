{"ast":null,"code":"var _jsxFileName = \"/Users/devnaganoolil/Desktop/Code/find-my-covid/src/components/CovidMap.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { MapContainer, TileLayer, Circle, Popup, Rectangle } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CovidMap = () => {\n  _s();\n  const [covidData, setCovidData] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('https://covid-19-tracking.p.rapidapi.com/v1', {\n          method: 'GET',\n          headers: {\n            'X-RapidAPI-Key': '156cf06ba4msh2c2cdb55142a549p162ba6jsncff6594c9c0b',\n            'X-RapidAPI-Host': 'covid-19-tracking.p.rapidapi.com'\n          }\n        });\n        if (!response.ok) {\n          throw new Error('Failed to fetch COVID-19 data');\n        }\n        const data = await response.json();\n        console.log('CovidMap data:', data); // Log the data\n        setCovidData(data);\n      } catch (error) {\n        console.error('Error fetching COVID-19 data:', error.message);\n      }\n    };\n    fetchData();\n  }, []);\n  const getColor = totalCases => {\n    if (totalCases > 100000000) return 'red';\n    if (totalCases > 10000000) return 'orange';\n    if (totalCases > 1000000) return 'yellow';\n    return 'green';\n  };\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    center: [0, 0],\n    zoom: 2,\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), covidData.map(country => /*#__PURE__*/_jsxDEV(Circle, {\n      center: [parseFloat(country['Country_text']), parseFloat(country['Country_text'])],\n      radius: Math.sqrt(parseInt(country.TotalCases_text.replace(/,/g, ''))) * 100,\n      pathOptions: {\n        fillColor: getColor(parseInt(country.TotalCases_text.replace(/,/g, ''))),\n        color: 'white'\n      },\n      children: /*#__PURE__*/_jsxDEV(Popup, {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: country.Country_text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this), \"Total Cases: \", country.TotalCases_text, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this), \"Total Deaths: \", country.TotalDeaths_text, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this), \"Total Recovered: \", country.TotalRecovered_text]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)\n    }, country.Country_text, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(Rectangle, {\n      bounds: [[51.49, -0.08], [51.5, -0.06]]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(CovidMap, \"pmLV4TA9V5OO0u7HDqr680w2LOk=\");\n_c = CovidMap;\nexport default CovidMap;\nvar _c;\n$RefreshReg$(_c, \"CovidMap\");","map":{"version":3,"names":["React","useEffect","useState","MapContainer","TileLayer","Circle","Popup","Rectangle","jsxDEV","_jsxDEV","CovidMap","_s","covidData","setCovidData","fetchData","response","fetch","method","headers","ok","Error","data","json","console","log","error","message","getColor","totalCases","center","zoom","children","attribution","url","fileName","_jsxFileName","lineNumber","columnNumber","map","country","parseFloat","radius","Math","sqrt","parseInt","TotalCases_text","replace","pathOptions","fillColor","color","Country_text","TotalDeaths_text","TotalRecovered_text","bounds","_c","$RefreshReg$"],"sources":["/Users/devnaganoolil/Desktop/Code/find-my-covid/src/components/CovidMap.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { MapContainer, TileLayer, Circle, Popup, Rectangle } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\n\nconst CovidMap = () => {\n  const [covidData, setCovidData] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('https://covid-19-tracking.p.rapidapi.com/v1', {\n          method: 'GET',\n          headers: {\n            'X-RapidAPI-Key': '156cf06ba4msh2c2cdb55142a549p162ba6jsncff6594c9c0b',\n            'X-RapidAPI-Host': 'covid-19-tracking.p.rapidapi.com',\n          },\n        });\n\n        if (!response.ok) {\n          throw new Error('Failed to fetch COVID-19 data');\n        }\n\n        const data = await response.json();\n        console.log('CovidMap data:', data); // Log the data\n        setCovidData(data);\n      } catch (error) {\n        console.error('Error fetching COVID-19 data:', error.message);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const getColor = (totalCases) => {\n    if (totalCases > 100000000) return 'red';\n    if (totalCases > 10000000) return 'orange';\n    if (totalCases > 1000000) return 'yellow';\n    return 'green';\n  };\n\n  return (\n    <MapContainer center={[0, 0]} zoom={2}>\n      <TileLayer\n        attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n\n      {covidData.map((country) => (\n        <Circle\n          key={country.Country_text}\n          center={[parseFloat(country['Country_text']), parseFloat(country['Country_text'])]}\n          radius={Math.sqrt(parseInt(country.TotalCases_text.replace(/,/g, ''))) * 100}\n          pathOptions={{ fillColor: getColor(parseInt(country.TotalCases_text.replace(/,/g, ''))), color: 'white' }}\n        >\n          <Popup>\n            <strong>{country.Country_text}</strong>\n            <br />\n            Total Cases: {country.TotalCases_text}\n            <br />\n            Total Deaths: {country.TotalDeaths_text}\n            <br />\n            Total Recovered: {country.TotalRecovered_text}\n          </Popup>\n        </Circle>\n      ))}\n\n      <Rectangle\n        bounds={[\n          [51.49, -0.08],\n          [51.5, -0.06],\n        ]}\n      />\n    </MapContainer>\n  );\n};\n\nexport default CovidMap;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}