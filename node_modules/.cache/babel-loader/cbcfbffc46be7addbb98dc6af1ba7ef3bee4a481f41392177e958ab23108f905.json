{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dev Naganoolil\\\\Desktop\\\\Find-My-Covid\\\\src\\\\components\\\\Map.js\";\nimport React, { useEffect, useState } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport locationPinIcon from './icons/location-pin.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst countryCoordinates = {\n  \"Afghanistan\": {\n    lat: 33.939112,\n    lng: 67.709973\n  },\n  \"Albania\": {\n    lat: 41.153317,\n    lng: 20.168322\n  },\n  \"Algeria\": {\n    lat: 28.033867,\n    lng: 1.65964\n  },\n  \"Andorra\": {\n    lat: 42.506272,\n    lng: 1.521812\n  },\n  \"Angola\": {\n    lat: -11.202665,\n    lng: 17.873885\n  },\n  \"Anguilla\": {\n    lat: 18.220553,\n    lng: -63.068597\n  },\n  \"Antigua and Barbuda\": {\n    lat: 17.060795,\n    lng: -61.796454\n  },\n  \"Argentina\": {\n    lat: -38.416104,\n    lng: -63.616669\n  },\n  \"Armenia\": {\n    lat: 40.069118,\n    lng: 45.03821\n  },\n  \"Aruba\": {\n    lat: 12.521137,\n    lng: -69.968364\n  },\n  \"Australia\": {\n    lat: -25.274425,\n    lng: 133.775122\n  },\n  \"Austria\": {\n    lat: 47.516218,\n    lng: 14.550056\n  },\n  \"Azerbaijan\": {\n    lat: 40.143127,\n    lng: 47.576945\n  },\n  \"Bahamas\": {\n    lat: 25.034266,\n    lng: -77.396267\n  },\n  \"Bahrain\": {\n    lat: 26.066726,\n    lng: 50.557697\n  },\n  \"Bangladesh\": {\n    lat: 23.684971,\n    lng: 90.356317\n  },\n  \"Barbados\": {\n    lat: 13.193885,\n    lng: -59.543184\n  },\n  \"Belarus\": {\n    lat: 53.70978,\n    lng: 27.953382\n  },\n  \"Belgium\": {\n    lat: 50.50388,\n    lng: 4.469922\n  },\n  \"Belize\": {\n    lat: 17.189875,\n    lng: -88.497661\n  },\n  \"Benin\": {\n    lat: 9.307715,\n    lng: 2.315858\n  },\n  \"Bermuda\": {\n    lat: 32.307773,\n    lng: -64.7505\n  },\n  \"Bhutan\": {\n    lat: 27.514182,\n    lng: 90.433623\n  },\n  \"Bolivia\": {\n    lat: -16.290157,\n    lng: -63.588667\n  },\n  \"Bosnia and Herzegovina\": {\n    lat: 43.915879,\n    lng: 17.679092\n  },\n  \"Botswana\": {\n    lat: -22.328464,\n    lng: 24.684841\n  },\n  \"Brazil\": {\n    lat: -14.234981,\n    lng: -51.925284\n  },\n  \"British Virgin Islands\": {\n    lat: 18.420668,\n    lng: -64.639993\n  },\n  \"Brunei\": {\n    lat: 4.535264,\n    lng: 114.727666\n  },\n  \"Bulgaria\": {\n    lat: 42.733909,\n    lng: 25.48581\n  },\n  \"Burkina Faso\": {\n    lat: 12.238308,\n    lng: -1.561591\n  },\n  \"Burundi\": {\n    lat: -3.37303,\n    lng: 29.91891\n  },\n  \"Cabo Verde\": {\n    lat: 16.538779,\n    lng: -23.041825\n  },\n  \"Cambodia\": {\n    lat: 12.565704,\n    lng: 104.990941\n  },\n  \"Cameroon\": {\n    lat: 7.369701,\n    lng: 12.354695\n  },\n  \"Canada\": {\n    lat: 56.13034,\n    lng: -106.346785\n  },\n  \"Caribbean Netherlands\": {\n    lat: 12.178383,\n    lng: -68.238544\n  },\n  \"Cayman Islands\": {\n    lat: 19.313287,\n    lng: -81.254625\n  },\n  \"Chad\": {\n    lat: 15.454186,\n    lng: 18.732227\n  },\n  \"Channel Islands\": {\n    lat: 49.458692,\n    lng: -2.382466\n  },\n  \"Chile\": {\n    lat: -35.675132,\n    lng: -71.542991\n  },\n  \"China\": {\n    lat: 35.86164,\n    lng: 104.195419\n  },\n  \"Colombia\": {\n    lat: 4.570849,\n    lng: -74.29736\n  },\n  \"Comoros\": {\n    lat: -11.645491,\n    lng: 43.333275\n  },\n  \"Congo\": {\n    lat: -4.038307,\n    lng: 21.758644\n  },\n  \"Cook Islands\": {\n    lat: -21.236715,\n    lng: -159.777682\n  },\n  \"Costa Rica\": {\n    lat: 9.748943,\n    lng: -83.753418\n  },\n  \"Croatia\": {\n    lat: 45.100017,\n    lng: 15.199988\n  },\n  \"Cuba\": {\n    lat: 21.521782,\n    lng: -77.781187\n  },\n  \"Cura√ßao\": {\n    lat: 12.169594,\n    lng: -68.990011\n  },\n  \"Cyprus\": {\n    lat: 35.126402,\n    lng: 33.429869\n  },\n  \"Czechia\": {\n    lat: 49.817519,\n    lng: 15.472979\n  },\n  \"DPRK\": {\n    lat: 40.339878,\n    lng: 127.510073\n  },\n  \"DRC\": {\n    lat: -4.038307,\n    lng: 21.758644\n  },\n  \"Denmark\": {\n    lat: 56.263912,\n    lng: 9.50177\n  },\n  \"Djibouti\": {\n    lat: 11.825123,\n    lng: 42.590301\n  },\n  \"Dominica\": {\n    lat: 15.414972,\n    lng: -61.370976\n  },\n  \"Dominican Republic\": {\n    lat: 18.735666,\n    lng: -70.16263\n  },\n  \"Ecuador\": {\n    lat: -1.831244,\n    lng: -78.183414\n  },\n  \"Egypt\": {\n    lat: 26.820563,\n    lng: 30.802498\n  },\n  \"El Salvador\": {\n    lat: 13.79416,\n    lng: -88.896546\n  },\n  \"Equatorial Guinea\": {\n    lat: 1.650814,\n    lng: 10.267876\n  },\n  \"Eritrea\": {\n    lat: 15.179368,\n    lng: 39.78236\n  },\n  \"Estonia\": {\n    lat: 58.595258,\n    lng: 25.013621\n  },\n  \"Eswatini\": {\n    lat: -26.522494,\n    lng: 31.465889\n  },\n  \"Ethiopia\": {\n    lat: 9.145017,\n    lng: 40.489652\n  },\n  \"Faeroe Islands\": {\n    lat: 61.892628,\n    lng: -6.911804\n  },\n  \"Fiji\": {\n    lat: -17.713393,\n    lng: 178.065033\n  },\n  \"Finland\": {\n    lat: 61.924117,\n    lng: 25.748144\n  },\n  \"France\": {\n    lat: 46.227653,\n    lng: 2.213746\n  },\n  \"French Guiana\": {\n    lat: 3.933905,\n    lng: -53.125762\n  },\n  \"French Polynesia\": {\n    lat: -17.679756,\n    lng: -149.406817\n  },\n  \"Gabon\": {\n    lat: -0.803715,\n    lng: 11.609434\n  },\n  \"Gambia\": {\n    lat: 13.443157,\n    lng: -15.310158\n  },\n  \"Georgia\": {\n    lat: 42.315381,\n    lng: 43.3569\n  },\n  \"Germany\": {\n    lat: 51.165704,\n    lng: 10.451543\n  },\n  \"Ghana\": {\n    lat: 7.946518,\n    lng: -1.023169\n  },\n  \"Gibraltar\": {\n    lat: 36.14073,\n    lng: -5.353567\n  },\n  \"Greece\": {\n    lat: 39.074195,\n    lng: 21.824302\n  },\n  \"Greenland\": {\n    lat: 71.706946,\n    lng: -42.604295\n  },\n  \"Grenada\": {\n    lat: 12.116527,\n    lng: -61.679026\n  },\n  \"Guadeloupe\": {\n    lat: 16.265027,\n    lng: -61.551\n  },\n  \"Guatemala\": {\n    lat: 15.783445,\n    lng: -90.230739\n  },\n  \"Guinea\": {\n    lat: 9.945598,\n    lng: -9.69666\n  },\n  \"Guinea Bissau\": {\n    lat: 11.803744,\n    lng: -15.180387\n  },\n  \"Guyana\": {\n    lat: 4.860424,\n    lng: -58.930154\n  },\n  \"Haiti\": {\n    lat: 18.971172,\n    lng: -72.285191\n  },\n  \"Honduras\": {\n    lat: 15.199982,\n    lng: -86.241916\n  },\n  \"Hong Kong\": {\n    lat: 22.319291,\n    lng: 114.169364\n  },\n  \"Hungary\": {\n    lat: 47.162521,\n    lng: 19.503308\n  },\n  \"Iceland\": {\n    lat: 64.963069,\n    lng: -19.02084\n  },\n  \"India\": {\n    lat: 20.593709,\n    lng: 78.962859\n  },\n  \"Indonesia\": {\n    lat: -0.789249,\n    lng: 113.921315\n  },\n  \"Iran\": {\n    lat: 32.427924,\n    lng: 53.688065\n  },\n  \"Iraq\": {\n    lat: 33.223197,\n    lng: 43.679314\n  },\n  \"Ireland\": {\n    lat: 53.779751,\n    lng: -7.305515\n  },\n  \"Isle of Man\": {\n    lat: 54.236134,\n    lng: -4.548069\n  },\n  \"Israel\": {\n    lat: 31.046041,\n    lng: 34.851625\n  },\n  \"Italy\": {\n    lat: 41.87195,\n    lng: 12.567394\n  },\n  \"Ivory Coast\": {\n    lat: 7.539962,\n    lng: -5.547102\n  },\n  \"Jamaica\": {\n    lat: 18.109605,\n    lng: -77.297491\n  },\n  \"Japan\": {\n    lat: 36.204797,\n    lng: 138.252933\n  },\n  \"Jordan\": {\n    lat: 30.585186,\n    lng: 36.238415\n  },\n  \"Kazakhstan\": {\n    lat: 48.019572,\n    lng: 66.92368\n  },\n  \"Kenya\": {\n    lat: -0.023541,\n    lng: 37.906167\n  },\n  \"Kiribati\": {\n    lat: 1.836913,\n    lng: -157.376856\n  },\n  \"Kuwait\": {\n    lat: 29.311638,\n    lng: 47.481742\n  },\n  \"Kyrgyzstan\": {\n    lat: 41.204407,\n    lng: 74.766115\n  },\n  \"Laos\": {\n    lat: 19.856297,\n    lng: 102.495512\n  },\n  \"Latvia\": {\n    lat: 56.879628,\n    lng: 24.603175\n  },\n  \"Lebanon\": {\n    lat: 33.854701,\n    lng: 35.862264\n  },\n  \"Lesotho\": {\n    lat: -29.609988,\n    lng: 28.233618\n  },\n  \"Liberia\": {\n    lat: 6.428082,\n    lng: -9.429473\n  },\n  \"Libya\": {\n    lat: 26.335119,\n    lng: 17.228355\n  },\n  \"Liechtenstein\": {\n    lat: 47.141022,\n    lng: 9.520923\n  },\n  \"Lithuania\": {\n    lat: 55.169428,\n    lng: 23.881277\n  },\n  \"Luxembourg\": {\n    lat: 49.815278,\n    lng: 6.12959\n  },\n  \"Macao\": {\n    lat: 22.19874,\n    lng: 113.543871\n  },\n  \"Madagascar\": {\n    lat: -18.766973,\n    lng: 46.869084\n  },\n  \"Malawi\": {\n    lat: -13.254282,\n    lng: 34.301551\n  },\n  \"Malaysia\": {\n    lat: 4.21046,\n    lng: 101.975745\n  },\n  \"Maldives\": {\n    lat: 3.202758,\n    lng: 73.22066\n  },\n  \"Mali\": {\n    lat: 17.570718,\n    lng: -3.996169\n  },\n  \"Malta\": {\n    lat: 35.937505,\n    lng: 14.375438\n  },\n  \"Marshall Islands\": {\n    lat: 7.131492,\n    lng: 171.184478\n  },\n  \"Martinique\": {\n    lat: 14.641505,\n    lng: -61.02418\n  },\n  \"Mauritania\": {\n    lat: 21.007916,\n    lng: -10.940815\n  },\n  \"Mauritius\": {\n    lat: -20.348393,\n    lng: 57.552129\n  },\n  \"Mayotte\": {\n    lat: -12.827527,\n    lng: 45.166249\n  },\n  \"Mexico\": {\n    lat: 23.63451,\n    lng: -102.552759\n  },\n  \"Micronesia\": {\n    lat: 7.425564,\n    lng: 150.550792\n  },\n  \"Moldova\": {\n    lat: 47.411624,\n    lng: 28.369903\n  },\n  \"Monaco\": {\n    lat: 43.738393,\n    lng: 7.424611\n  },\n  \"Mongolia\": {\n    lat: 46.862487,\n    lng: 103.846654\n  },\n  \"Montenegro\": {\n    lat: 42.708693,\n    lng: 19.374371\n  },\n  \"Morocco\": {\n    lat: 31.791716,\n    lng: -7.09263\n  },\n  \"Mozambique\": {\n    lat: -18.665689,\n    lng: 35.529537\n  },\n  \"Myanmar\": {\n    lat: 21.916241,\n    lng: 95.955949\n  },\n  \"Namibia\": {\n    lat: -22.957618,\n    lng: 18.490412\n  },\n  \"Nauru\": {\n    lat: -0.522792,\n    lng: 166.931494\n  },\n  \"Nepal\": {\n    lat: 28.394854,\n    lng: 84.124023\n  },\n  \"Netherlands\": {\n    lat: 52.13263,\n    lng: 5.291258\n  },\n  \"New Caledonia\": {\n    lat: -20.904279,\n    lng: 165.618043\n  },\n  \"New Zealand\": {\n    lat: -40.900556,\n    lng: 174.885951\n  },\n  \"Nicaragua\": {\n    lat: 12.865418,\n    lng: -85.207234\n  },\n  \"Niger\": {\n    lat: 17.607802,\n    lng: 8.08166\n  },\n  \"Nigeria\": {\n    lat: 9.082016,\n    lng: 8.675264\n  },\n  \"North Macedonia\": {\n    lat: 41.60866,\n    lng: 21.745291\n  },\n  \"Norway\": {\n    lat: 60.472042,\n    lng: 8.468945\n  },\n  \"Oman\": {\n    lat: 21.473524,\n    lng: 55.975415\n  },\n  \"Pakistan\": {\n    lat: 30.375327,\n    lng: 69.345118\n  },\n  \"Palau\": {\n    lat: 7.51498,\n    lng: 134.582503\n  },\n  \"Palestine\": {\n    lat: 31.952189,\n    lng: 35.233132\n  },\n  \"Panama\": {\n    lat: 8.537958,\n    lng: -80.782101\n  },\n  \"Papua New Guinea\": {\n    lat: -6.31497,\n    lng: 143.95556\n  },\n  \"Paraguay\": {\n    lat: -23.442476,\n    lng: -58.443807\n  },\n  \"Peru\": {\n    lat: -9.189984,\n    lng: -75.015155\n  },\n  \"Philippines\": {\n    lat: 12.879734,\n    lng: 121.774026\n  },\n  \"Poland\": {\n    lat: 51.919414,\n    lng: 19.145153\n  },\n  \"Portugal\": {\n    lat: 39.399845,\n    lng: -8.224436\n  },\n  \"Qatar\": {\n    lat: 25.354852,\n    lng: 51.183898\n  },\n  \"Romania\": {\n    lat: 45.943135,\n    lng: 24.96677\n  },\n  \"Russia\": {\n    lat: 61.52401,\n    lng: 105.318762\n  },\n  \"Rwanda\": {\n    lat: -1.940264,\n    lng: 29.873912\n  },\n  \"R√©union\": {\n    lat: -21.11516,\n    lng: 55.53636\n  },\n  \"S. Korea\": {\n    lat: 35.90773,\n    lng: 127.766942\n  },\n  \"Saint Kitts and Nevis\": {\n    lat: 17.3578,\n    lng: -62.782981\n  },\n  \"Saint Lucia\": {\n    lat: 13.909445,\n    lng: -60.978904\n  },\n  \"Saint Martin\": {\n    lat: 18.07081,\n    lng: -63.050071\n  },\n  \"Samoa\": {\n    lat: -13.759003,\n    lng: -172.104603\n  },\n  \"San Marino\": {\n    lat: 43.942363,\n    lng: 12.457795\n  },\n  \"Sao Tome and Principe\": {\n    lat: 0.186334,\n    lng: 6.613055\n  },\n  \"Saudi Arabia\": {\n    lat: 23.885941,\n    lng: 45.079138\n  },\n  \"Senegal\": {\n    lat: 14.497377,\n    lng: -14.452338\n  },\n  \"Serbia\": {\n    lat: 44.016494,\n    lng: 21.005857\n  },\n  \"Seychelles\": {\n    lat: -4.679566,\n    lng: 55.49195\n  },\n  \"Sierra Leone\": {\n    lat: 8.460565,\n    lng: -11.77987\n  },\n  \"Singapore\": {\n    lat: 1.35211,\n    lng: 103.81983\n  },\n  \"Sint Maarten\": {\n    lat: 18.042453,\n    lng: -63.054844\n  },\n  \"Slovakia\": {\n    lat: 48.669002,\n    lng: 19.699006\n  },\n  \"Slovenia\": {\n    lat: 46.151227,\n    lng: 14.995479\n  },\n  \"Solomon Islands\": {\n    lat: -9.645683,\n    lng: 160.156214\n  },\n  \"Somalia\": {\n    lat: 5.152156,\n    lng: 46.199642\n  },\n  \"South Africa\": {\n    lat: -30.559482,\n    lng: 22.937491\n  },\n  \"South Sudan\": {\n    lat: 6.877009,\n    lng: 31.30697\n  },\n  \"Spain\": {\n    lat: 40.463661,\n    lng: -3.74921\n  },\n  \"Sri Lanka\": {\n    lat: 7.873028,\n    lng: 80.771776\n  },\n  \"St. Barth\": {\n    lat: 17.899983,\n    lng: -62.833336\n  },\n  \"St. Vincent Grenadines\": {\n    lat: 12.984279,\n    lng: -61.287203\n  },\n  \"Sudan\": {\n    lat: 12.862833,\n    lng: 30.217634\n  },\n  \"Suriname\": {\n    lat: 3.919309,\n    lng: -56.027808\n  },\n  \"Sweden\": {\n    lat: 60.128146,\n    lng: 18.643501\n  },\n  \"Switzerland\": {\n    lat: 46.818192,\n    lng: 8.227528\n  },\n  \"Syria\": {\n    lat: 34.802059,\n    lng: 38.996812\n  },\n  \"Taiwan\": {\n    lat: 23.697824,\n    lng: 120.960524\n  },\n  \"Tajikistan\": {\n    lat: 38.861017,\n    lng: 71.276085\n  },\n  \"Tanzania\": {\n    lat: -6.369004,\n    lng: 34.888816\n  },\n  \"Thailand\": {\n    lat: 15.870055,\n    lng: 100.992557\n  },\n  \"Timor-Leste\": {\n    lat: -8.874221,\n    lng: 125.727513\n  },\n  \"Togo\": {\n    lat: 8.619516,\n    lng: 0.824761\n  },\n  \"Tonga\": {\n    lat: -21.179013,\n    lng: -175.198247\n  },\n  \"Trinidad and Tobago\": {\n    lat: 10.691799,\n    lng: -61.222503\n  },\n  \"Tunisia\": {\n    lat: 33.886943,\n    lng: 9.537477\n  },\n  \"Turkey\": {\n    lat: 38.96377,\n    lng: 35.243312\n  },\n  \"Turks and Caicos\": {\n    lat: 21.694034,\n    lng: -71.797921\n  },\n  \"UAE\": {\n    lat: 23.424052,\n    lng: 53.847831\n  },\n  \"UK\": {\n    lat: 55.378069,\n    lng: -3.435958\n  },\n  \"USA\": {\n    lat: 37.090261,\n    lng: -95.71287\n  },\n  \"Uganda\": {\n    lat: 1.373318,\n    lng: 32.29025\n  },\n  \"Ukraine\": {\n    lat: 48.379434,\n    lng: 31.165565\n  },\n  \"Uruguay\": {\n    lat: -32.522758,\n    lng: -55.765857\n  },\n  \"Uzbekistan\": {\n    lat: 41.377491,\n    lng: 64.585278\n  },\n  \"Vanuatu\": {\n    lat: -15.376702,\n    lng: 166.959161\n  },\n  \"Venezuela\": {\n    lat: 6.423723,\n    lng: -66.589709\n  },\n  \"Vietnam\": {\n    lat: 14.05833,\n    lng: 108.277174\n  },\n  \"Yemen\": {\n    lat: 15.55274,\n    lng: 48.516363\n  },\n  \"Zambia\": {\n    lat: -13.133921,\n    lng: 27.849351\n  },\n  \"Zimbabwe\": {\n    lat: -19.015414,\n    lng: 29.154868\n  }\n};\n\n// const Map = ({ center, zoom }) => {\n//   const [covidData, setCovidData] = useState([]);\n//   const [countryCoordinates, setCountryCoordinates] = useState({});\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         // Fetch COVID-19 data\n//         const response = await fetch('https://covid-19-tracking.p.rapidapi.com/v1', {\n//           method: 'GET',\n//           headers: {\n//             'X-RapidAPI-Key': '156cf06ba4msh2c2cdb55142a549p162ba6jsncff6594c9c0b',\n//             'X-RapidAPI-Host': 'covid-19-tracking.p.rapidapi.com',\n//           },\n//         });\n\n//         if (!response.ok) {\n//           throw new Error('Failed to fetch COVID-19 data');\n//         }\n\n//         const data = await response.json();\n//         setCovidData(data);\n//       } catch (error) {\n//         console.error('Error fetching COVID-19 data:', error.message);\n//       }\n//     };\n\n//     fetchData();\n//   }, []);\n\n// useEffect(() => {\n//   const fetchCoordinates = async () => {\n//     const newCountryCoordinates = { ...countryCoordinates };\n\n//     for (const country of covidData) {\n//       const countryName = country.Country_text;\n\n//       // Check if the country is already in the coordinates object\n//       if (!newCountryCoordinates[countryName]) {\n//         // Use the countryName in the geocoding API\n//         const url = `https://trueway-geocoding.p.rapidapi.com/Geocode?address=${encodeURIComponent(countryName)}`;\n//         const options = {\n//           method: 'GET',\n//           headers: {\n//             'X-RapidAPI-Key': '156cf06ba4msh2c2cdb55142a549p162ba6jsncff6594c9c0b',\n//             'X-RapidAPI-Host': 'trueway-geocoding.p.rapidapi.com'\n//           }\n//         };\n\n//         try {\n//           const response = await fetch(url, options);\n//           const result = await response.json();\n\n//           // Extract the coordinates from the result\n//           const coordinates = result.results[0]?.location;\n\n//           // Store the coordinates in the object\n//           newCountryCoordinates[countryName] = coordinates;\n\n//           console.log(`Geocoding result for ${countryName}:`, coordinates);\n//         } catch (error) {\n//           console.error(`Error geocoding for ${countryName}:`, error);\n//         }\n\n//         // Introduce a delay of 5 seconds\n//         await new Promise(resolve => setTimeout(resolve, 5000));\n//       } else {\n//         console.log(`Skipping ${countryName}, coordinates already present.`);\n//       }\n//     }\n\n//     // Update the state with the new coordinates\n//     setCountryCoordinates(newCountryCoordinates);\n//   };\n\n//   // Fetch coordinates when covidData changes\n//   if (covidData.length > 0) {\n//     fetchCoordinates();\n//   }\n// }, [covidData, countryCoordinates]);\n\n// console.log('Map component covidData:', covidData);\n// Object.entries(countryCoordinates).forEach(([country, coordinates]) => {\n//   console.log(`Country: ${country}, Coordinates: ${coordinates.lat}, ${coordinates.lng}`);\n// });\n\nconst customIcon = new L.Icon({\n  iconUrl: locationPinIcon,\n  iconSize: [32, 32],\n  iconAnchor: [16, 32],\n  popupAnchor: [0, -32]\n});\nconst Map = () => {\n  const center = {\n    lat: 37.0902,\n    lng: -95.7129\n  };\n  const zoom = 4;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map\",\n    children: /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: center,\n      zoom: zoom,\n      minZoom: 3,\n      worldCopyJump: true,\n      maxBoundsViscosity: 1.0,\n      style: {\n        height: '500px',\n        width: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://api.maptiler.com/maps/basic-v2/{z}/{x}/{y}.png?key=JdbYq0IOmnjd0Jgw8cH7\",\n        tileSize: 512,\n        zoomOffset: -1,\n        attribution: \"<a href=\\\"https://www.maptiler.com/copyright/\\\" target=\\\"_blank\\\">\\xA9 MapTiler</a> <a href=\\\"https://www.openstreetmap.org/copyright\\\" target=\\\"_blank\\\">\\xA9 OpenStreetMap contributors</a>\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 11\n      }, this), Object.entries(countryCoordinates).map(([countryName, coordinates]) => /*#__PURE__*/_jsxDEV(Marker, {\n        position: coordinates,\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: countryName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 15\n        }, this)\n      }, countryName, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 332,\n    columnNumber: 7\n  }, this);\n};\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useEffect","useState","MapContainer","TileLayer","Marker","Popup","locationPinIcon","jsxDEV","_jsxDEV","countryCoordinates","lat","lng","customIcon","L","Icon","iconUrl","iconSize","iconAnchor","popupAnchor","Map","center","zoom","className","children","minZoom","worldCopyJump","maxBoundsViscosity","style","height","width","url","tileSize","zoomOffset","attribution","fileName","_jsxFileName","lineNumber","columnNumber","Object","entries","map","countryName","coordinates","position","_c","$RefreshReg$"],"sources":["C:/Users/Dev Naganoolil/Desktop/Find-My-Covid/src/components/Map.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport locationPinIcon from './icons/location-pin.png';\r\n\r\n\r\n\r\n\r\n\r\nconst countryCoordinates = {\r\n  \"Afghanistan\": {lat: 33.939112, lng: 67.709973},\r\n  \"Albania\": {lat: 41.153317, lng: 20.168322},\r\n  \"Algeria\": {lat: 28.033867, lng: 1.65964},\r\n  \"Andorra\": {lat: 42.506272, lng: 1.521812},\r\n  \"Angola\": {lat: -11.202665, lng: 17.873885},\r\n  \"Anguilla\": {lat: 18.220553, lng: -63.068597},\r\n  \"Antigua and Barbuda\": {lat: 17.060795, lng: -61.796454},\r\n  \"Argentina\": {lat: -38.416104, lng: -63.616669},\r\n  \"Armenia\": {lat: 40.069118, lng: 45.03821},\r\n  \"Aruba\": {lat: 12.521137, lng: -69.968364},\r\n  \"Australia\": {lat: -25.274425, lng: 133.775122},\r\n  \"Austria\": {lat: 47.516218, lng: 14.550056},\r\n  \"Azerbaijan\": {lat: 40.143127, lng: 47.576945},\r\n  \"Bahamas\": {lat: 25.034266, lng: -77.396267},\r\n  \"Bahrain\": {lat: 26.066726, lng: 50.557697},\r\n  \"Bangladesh\": {lat: 23.684971, lng: 90.356317},\r\n  \"Barbados\": {lat: 13.193885, lng: -59.543184},\r\n  \"Belarus\": {lat: 53.70978, lng: 27.953382},\r\n  \"Belgium\": {lat: 50.50388, lng: 4.469922},\r\n  \"Belize\": {lat: 17.189875, lng: -88.497661},\r\n  \"Benin\": {lat: 9.307715, lng: 2.315858},\r\n  \"Bermuda\": {lat: 32.307773, lng: -64.7505},\r\n  \"Bhutan\": {lat: 27.514182, lng: 90.433623},\r\n  \"Bolivia\": {lat: -16.290157, lng: -63.588667},\r\n  \"Bosnia and Herzegovina\": {lat: 43.915879, lng: 17.679092},\r\n  \"Botswana\": {lat: -22.328464, lng: 24.684841},\r\n  \"Brazil\": {lat: -14.234981, lng: -51.925284},\r\n  \"British Virgin Islands\": {lat: 18.420668, lng: -64.639993},\r\n  \"Brunei\": {lat: 4.535264, lng: 114.727666},\r\n  \"Bulgaria\": {lat: 42.733909, lng: 25.48581},\r\n  \"Burkina Faso\": {lat: 12.238308, lng: -1.561591},\r\n  \"Burundi\": {lat: -3.37303, lng: 29.91891},\r\n  \"Cabo Verde\": {lat: 16.538779, lng: -23.041825},\r\n  \"Cambodia\": {lat: 12.565704, lng: 104.990941},\r\n  \"Cameroon\": {lat: 7.369701, lng: 12.354695},\r\n  \"Canada\": {lat: 56.13034, lng: -106.346785},\r\n  \"Caribbean Netherlands\": {lat: 12.178383, lng: -68.238544},\r\n  \"Cayman Islands\": {lat: 19.313287, lng: -81.254625},\r\n  \"Chad\": {lat: 15.454186, lng: 18.732227},\r\n  \"Channel Islands\": {lat: 49.458692, lng: -2.382466},\r\n  \"Chile\": {lat: -35.675132, lng: -71.542991},\r\n  \"China\": {lat: 35.86164, lng: 104.195419},\r\n  \"Colombia\": {lat: 4.570849, lng: -74.29736},\r\n  \"Comoros\": {lat: -11.645491, lng: 43.333275},\r\n  \"Congo\": {lat: -4.038307, lng: 21.758644},\r\n  \"Cook Islands\": {lat: -21.236715, lng: -159.777682},\r\n  \"Costa Rica\": {lat: 9.748943, lng: -83.753418},\r\n  \"Croatia\": {lat: 45.100017, lng: 15.199988},\r\n  \"Cuba\": {lat: 21.521782, lng: -77.781187},\r\n  \"Cura√ßao\": {lat: 12.169594, lng: -68.990011},\r\n  \"Cyprus\": {lat: 35.126402, lng: 33.429869},\r\n  \"Czechia\": {lat: 49.817519, lng: 15.472979},\r\n  \"DPRK\": {lat: 40.339878, lng: 127.510073},\r\n  \"DRC\": {lat: -4.038307, lng: 21.758644},\r\n  \"Denmark\": {lat: 56.263912, lng: 9.50177},\r\n  \"Djibouti\": {lat: 11.825123, lng: 42.590301},\r\n  \"Dominica\": {lat: 15.414972, lng: -61.370976},\r\n  \"Dominican Republic\": {lat: 18.735666, lng: -70.16263},\r\n  \"Ecuador\": {lat: -1.831244, lng: -78.183414},\r\n  \"Egypt\": {lat: 26.820563, lng: 30.802498},\r\n  \"El Salvador\": {lat: 13.79416, lng: -88.896546},\r\n  \"Equatorial Guinea\": {lat: 1.650814, lng: 10.267876},\r\n  \"Eritrea\": {lat: 15.179368, lng: 39.78236},\r\n  \"Estonia\": {lat: 58.595258, lng: 25.013621},\r\n  \"Eswatini\": {lat: -26.522494, lng: 31.465889},\r\n  \"Ethiopia\": {lat: 9.145017, lng: 40.489652},\r\n  \"Faeroe Islands\": {lat: 61.892628, lng: -6.911804},\r\n  \"Fiji\": {lat: -17.713393, lng: 178.065033},\r\n  \"Finland\": {lat: 61.924117, lng: 25.748144},\r\n  \"France\": {lat: 46.227653, lng: 2.213746},\r\n  \"French Guiana\": {lat: 3.933905, lng: -53.125762},\r\n  \"French Polynesia\": {lat: -17.679756, lng: -149.406817},\r\n  \"Gabon\": {lat: -0.803715, lng: 11.609434},\r\n  \"Gambia\": {lat: 13.443157, lng: -15.310158},\r\n  \"Georgia\": {lat: 42.315381, lng: 43.3569},\r\n  \"Germany\": {lat: 51.165704, lng: 10.451543},\r\n  \"Ghana\": {lat: 7.946518, lng: -1.023169},\r\n  \"Gibraltar\": {lat: 36.14073, lng: -5.353567},\r\n  \"Greece\": {lat: 39.074195, lng: 21.824302},\r\n  \"Greenland\": {lat: 71.706946, lng: -42.604295},\r\n  \"Grenada\": {lat: 12.116527, lng: -61.679026},\r\n  \"Guadeloupe\": {lat: 16.265027, lng: -61.551},\r\n  \"Guatemala\": {lat: 15.783445, lng: -90.230739},\r\n  \"Guinea\": {lat: 9.945598, lng: -9.69666},\r\n  \"Guinea Bissau\": {lat: 11.803744, lng: -15.180387},\r\n  \"Guyana\": {lat: 4.860424, lng: -58.930154},\r\n  \"Haiti\": {lat: 18.971172, lng: -72.285191},\r\n  \"Honduras\": {lat: 15.199982, lng: -86.241916},\r\n  \"Hong Kong\": {lat: 22.319291, lng: 114.169364},\r\n  \"Hungary\": {lat: 47.162521, lng: 19.503308},\r\n  \"Iceland\": {lat: 64.963069, lng: -19.02084},\r\n  \"India\": {lat: 20.593709, lng: 78.962859},\r\n  \"Indonesia\": {lat: -0.789249, lng: 113.921315},\r\n  \"Iran\": {lat: 32.427924, lng: 53.688065},\r\n  \"Iraq\": {lat: 33.223197, lng: 43.679314},\r\n  \"Ireland\": {lat: 53.779751, lng: -7.305515},\r\n  \"Isle of Man\": {lat: 54.236134, lng: -4.548069},\r\n  \"Israel\": {lat: 31.046041, lng: 34.851625},\r\n  \"Italy\": {lat: 41.87195, lng: 12.567394},\r\n  \"Ivory Coast\": {lat: 7.539962, lng: -5.547102},\r\n  \"Jamaica\": {lat: 18.109605, lng: -77.297491},\r\n  \"Japan\": {lat: 36.204797, lng: 138.252933},\r\n  \"Jordan\": {lat: 30.585186, lng: 36.238415},\r\n  \"Kazakhstan\": {lat: 48.019572, lng: 66.92368},\r\n  \"Kenya\": {lat: -0.023541, lng: 37.906167},\r\n  \"Kiribati\": {lat: 1.836913, lng: -157.376856},\r\n  \"Kuwait\": {lat: 29.311638, lng: 47.481742},\r\n  \"Kyrgyzstan\": {lat: 41.204407, lng: 74.766115},\r\n  \"Laos\": {lat: 19.856297, lng: 102.495512},\r\n  \"Latvia\": {lat: 56.879628, lng: 24.603175},\r\n  \"Lebanon\": {lat: 33.854701, lng: 35.862264},\r\n  \"Lesotho\": {lat: -29.609988, lng: 28.233618},\r\n  \"Liberia\": {lat: 6.428082, lng: -9.429473},\r\n  \"Libya\": {lat: 26.335119, lng: 17.228355},\r\n  \"Liechtenstein\": {lat: 47.141022, lng: 9.520923},\r\n  \"Lithuania\": {lat: 55.169428, lng: 23.881277},\r\n  \"Luxembourg\": {lat: 49.815278, lng: 6.12959},\r\n  \"Macao\": {lat: 22.19874, lng: 113.543871},\r\n  \"Madagascar\": {lat: -18.766973, lng: 46.869084},\r\n  \"Malawi\": {lat: -13.254282, lng: 34.301551},\r\n  \"Malaysia\": {lat: 4.21046, lng: 101.975745},\r\n  \"Maldives\": {lat: 3.202758, lng: 73.22066},\r\n  \"Mali\": {lat: 17.570718, lng: -3.996169},\r\n  \"Malta\": {lat: 35.937505, lng: 14.375438},\r\n  \"Marshall Islands\": {lat: 7.131492, lng: 171.184478},\r\n  \"Martinique\": {lat: 14.641505, lng: -61.02418},\r\n  \"Mauritania\": {lat: 21.007916, lng: -10.940815},\r\n  \"Mauritius\": {lat: -20.348393, lng: 57.552129},\r\n  \"Mayotte\": {lat: -12.827527, lng: 45.166249},\r\n  \"Mexico\": {lat: 23.63451, lng: -102.552759},\r\n  \"Micronesia\": {lat: 7.425564, lng: 150.550792},\r\n  \"Moldova\": {lat: 47.411624, lng: 28.369903},\r\n  \"Monaco\": {lat: 43.738393, lng: 7.424611},\r\n  \"Mongolia\": {lat: 46.862487, lng: 103.846654},\r\n  \"Montenegro\": {lat: 42.708693, lng: 19.374371},\r\n  \"Morocco\": {lat: 31.791716, lng: -7.09263},\r\n  \"Mozambique\": {lat: -18.665689, lng: 35.529537},\r\n  \"Myanmar\": {lat: 21.916241, lng: 95.955949},\r\n  \"Namibia\": {lat: -22.957618, lng: 18.490412},\r\n  \"Nauru\": {lat: -0.522792, lng: 166.931494},\r\n  \"Nepal\": {lat: 28.394854, lng: 84.124023},\r\n  \"Netherlands\": {lat: 52.13263, lng: 5.291258},\r\n  \"New Caledonia\": {lat: -20.904279, lng: 165.618043},\r\n  \"New Zealand\": {lat: -40.900556, lng: 174.885951},\r\n  \"Nicaragua\": {lat: 12.865418, lng: -85.207234},\r\n  \"Niger\": {lat: 17.607802, lng: 8.08166},\r\n  \"Nigeria\": {lat: 9.082016, lng: 8.675264},\r\n  \"North Macedonia\": {lat: 41.60866, lng: 21.745291},\r\n  \"Norway\": {lat: 60.472042, lng: 8.468945},\r\n  \"Oman\": {lat: 21.473524, lng: 55.975415},\r\n  \"Pakistan\": {lat: 30.375327, lng: 69.345118},\r\n  \"Palau\": {lat: 7.51498, lng: 134.582503},\r\n  \"Palestine\": {lat: 31.952189, lng: 35.233132},\r\n  \"Panama\": {lat: 8.537958, lng: -80.782101},\r\n  \"Papua New Guinea\": {lat: -6.31497, lng: 143.95556},\r\n  \"Paraguay\": {lat: -23.442476, lng: -58.443807},\r\n  \"Peru\": {lat: -9.189984, lng: -75.015155},\r\n  \"Philippines\": {lat: 12.879734, lng: 121.774026},\r\n  \"Poland\": {lat: 51.919414, lng: 19.145153},\r\n  \"Portugal\": {lat: 39.399845, lng: -8.224436},\r\n  \"Qatar\": {lat: 25.354852, lng: 51.183898},\r\n  \"Romania\": {lat: 45.943135, lng: 24.96677},\r\n  \"Russia\": {lat: 61.52401, lng: 105.318762},\r\n  \"Rwanda\": {lat: -1.940264, lng: 29.873912},\r\n  \"R√©union\": {lat: -21.11516, lng: 55.53636},\r\n  \"S. Korea\": {lat: 35.90773, lng: 127.766942},\r\n  \"Saint Kitts and Nevis\": {lat: 17.3578, lng: -62.782981},\r\n  \"Saint Lucia\": {lat: 13.909445, lng: -60.978904},\r\n  \"Saint Martin\": {lat: 18.07081, lng: -63.050071},\r\n  \"Samoa\": {lat: -13.759003, lng: -172.104603},\r\n  \"San Marino\": {lat: 43.942363, lng: 12.457795},\r\n  \"Sao Tome and Principe\": {lat: 0.186334, lng: 6.613055},\r\n  \"Saudi Arabia\": {lat: 23.885941, lng: 45.079138},\r\n  \"Senegal\": {lat: 14.497377, lng: -14.452338},\r\n  \"Serbia\": {lat: 44.016494, lng: 21.005857},\r\n  \"Seychelles\": {lat: -4.679566, lng: 55.49195},\r\n  \"Sierra Leone\": {lat: 8.460565, lng: -11.77987},\r\n  \"Singapore\": {lat: 1.35211, lng: 103.81983},\r\n  \"Sint Maarten\": {lat: 18.042453, lng: -63.054844},\r\n  \"Slovakia\": {lat: 48.669002, lng: 19.699006},\r\n  \"Slovenia\": {lat: 46.151227, lng: 14.995479},\r\n  \"Solomon Islands\": {lat: -9.645683, lng: 160.156214},\r\n  \"Somalia\": {lat: 5.152156, lng: 46.199642},\r\n  \"South Africa\": {lat: -30.559482, lng: 22.937491},\r\n  \"South Sudan\": {lat: 6.877009, lng: 31.30697},\r\n  \"Spain\": {lat: 40.463661, lng: -3.74921},\r\n  \"Sri Lanka\": {lat: 7.873028, lng: 80.771776},\r\n  \"St. Barth\": {lat: 17.899983, lng: -62.833336},\r\n  \"St. Vincent Grenadines\": {lat: 12.984279, lng: -61.287203},\r\n  \"Sudan\": {lat: 12.862833, lng: 30.217634},\r\n  \"Suriname\": {lat: 3.919309, lng: -56.027808},\r\n  \"Sweden\": {lat: 60.128146, lng: 18.643501},\r\n  \"Switzerland\": {lat: 46.818192, lng: 8.227528},\r\n  \"Syria\": {lat: 34.802059, lng: 38.996812},\r\n  \"Taiwan\": {lat: 23.697824, lng: 120.960524},\r\n  \"Tajikistan\": {lat: 38.861017, lng: 71.276085},\r\n  \"Tanzania\": {lat: -6.369004, lng: 34.888816},\r\n  \"Thailand\": {lat: 15.870055, lng: 100.992557},\r\n  \"Timor-Leste\": {lat: -8.874221, lng: 125.727513},\r\n  \"Togo\": {lat: 8.619516, lng: 0.824761},\r\n  \"Tonga\": {lat: -21.179013, lng: -175.198247},\r\n  \"Trinidad and Tobago\": {lat: 10.691799, lng: -61.222503},\r\n  \"Tunisia\": {lat: 33.886943, lng: 9.537477},\r\n  \"Turkey\": {lat: 38.96377, lng: 35.243312},\r\n  \"Turks and Caicos\": {lat: 21.694034, lng: -71.797921},\r\n  \"UAE\": {lat: 23.424052, lng: 53.847831},\r\n  \"UK\": {lat: 55.378069, lng: -3.435958},\r\n  \"USA\": {lat: 37.090261, lng: -95.71287},\r\n  \"Uganda\": {lat: 1.373318, lng: 32.29025},\r\n  \"Ukraine\": {lat: 48.379434, lng: 31.165565},\r\n  \"Uruguay\": {lat: -32.522758, lng: -55.765857},\r\n  \"Uzbekistan\": {lat: 41.377491, lng: 64.585278},\r\n  \"Vanuatu\": {lat: -15.376702, lng: 166.959161},\r\n  \"Venezuela\": {lat: 6.423723, lng: -66.589709},\r\n  \"Vietnam\": {lat: 14.05833, lng: 108.277174},\r\n  \"Yemen\": {lat: 15.55274, lng: 48.516363},\r\n  \"Zambia\": {lat: -13.133921, lng: 27.849351},\r\n  \"Zimbabwe\": {lat: -19.015414, lng: 29.154868},\r\n};\r\n\r\n\r\n\r\n// const Map = ({ center, zoom }) => {\r\n//   const [covidData, setCovidData] = useState([]);\r\n//   const [countryCoordinates, setCountryCoordinates] = useState({});\r\n\r\n//   useEffect(() => {\r\n//     const fetchData = async () => {\r\n//       try {\r\n//         // Fetch COVID-19 data\r\n//         const response = await fetch('https://covid-19-tracking.p.rapidapi.com/v1', {\r\n//           method: 'GET',\r\n//           headers: {\r\n//             'X-RapidAPI-Key': '156cf06ba4msh2c2cdb55142a549p162ba6jsncff6594c9c0b',\r\n//             'X-RapidAPI-Host': 'covid-19-tracking.p.rapidapi.com',\r\n//           },\r\n//         });\r\n\r\n//         if (!response.ok) {\r\n//           throw new Error('Failed to fetch COVID-19 data');\r\n//         }\r\n\r\n//         const data = await response.json();\r\n//         setCovidData(data);\r\n//       } catch (error) {\r\n//         console.error('Error fetching COVID-19 data:', error.message);\r\n//       }\r\n//     };\r\n\r\n//     fetchData();\r\n//   }, []);\r\n\r\n  // useEffect(() => {\r\n  //   const fetchCoordinates = async () => {\r\n  //     const newCountryCoordinates = { ...countryCoordinates };\r\n  \r\n  //     for (const country of covidData) {\r\n  //       const countryName = country.Country_text;\r\n  \r\n  //       // Check if the country is already in the coordinates object\r\n  //       if (!newCountryCoordinates[countryName]) {\r\n  //         // Use the countryName in the geocoding API\r\n  //         const url = `https://trueway-geocoding.p.rapidapi.com/Geocode?address=${encodeURIComponent(countryName)}`;\r\n  //         const options = {\r\n  //           method: 'GET',\r\n  //           headers: {\r\n  //             'X-RapidAPI-Key': '156cf06ba4msh2c2cdb55142a549p162ba6jsncff6594c9c0b',\r\n  //             'X-RapidAPI-Host': 'trueway-geocoding.p.rapidapi.com'\r\n  //           }\r\n  //         };\r\n  \r\n  //         try {\r\n  //           const response = await fetch(url, options);\r\n  //           const result = await response.json();\r\n  \r\n  //           // Extract the coordinates from the result\r\n  //           const coordinates = result.results[0]?.location;\r\n  \r\n  //           // Store the coordinates in the object\r\n  //           newCountryCoordinates[countryName] = coordinates;\r\n  \r\n  //           console.log(`Geocoding result for ${countryName}:`, coordinates);\r\n  //         } catch (error) {\r\n  //           console.error(`Error geocoding for ${countryName}:`, error);\r\n  //         }\r\n  \r\n  //         // Introduce a delay of 5 seconds\r\n  //         await new Promise(resolve => setTimeout(resolve, 5000));\r\n  //       } else {\r\n  //         console.log(`Skipping ${countryName}, coordinates already present.`);\r\n  //       }\r\n  //     }\r\n  \r\n  //     // Update the state with the new coordinates\r\n  //     setCountryCoordinates(newCountryCoordinates);\r\n  //   };\r\n  \r\n  //   // Fetch coordinates when covidData changes\r\n  //   if (covidData.length > 0) {\r\n  //     fetchCoordinates();\r\n  //   }\r\n  // }, [covidData, countryCoordinates]);\r\n  \r\n\r\n  // console.log('Map component covidData:', covidData);\r\n  // Object.entries(countryCoordinates).forEach(([country, coordinates]) => {\r\n  //   console.log(`Country: ${country}, Coordinates: ${coordinates.lat}, ${coordinates.lng}`);\r\n  // });\r\n\r\n  const customIcon = new L.Icon({\r\n    iconUrl: locationPinIcon,\r\n    iconSize: [32, 32],\r\n    iconAnchor: [16, 32],\r\n    popupAnchor: [0, -32],\r\n  });\r\n  \r\n  const Map = () => {\r\n    const center = { lat: 37.0902, lng: -95.7129 };\r\n    const zoom = 4;\r\n  \r\n    return (\r\n      <div className=\"map\">\r\n        <MapContainer\r\n          center={center}\r\n          zoom={zoom}\r\n          minZoom={3}\r\n          worldCopyJump={true}\r\n          maxBoundsViscosity={1.0}\r\n          style={{ height: '500px', width: '100%' }}\r\n        >\r\n          <TileLayer\r\n            url=\"https://api.maptiler.com/maps/basic-v2/{z}/{x}/{y}.png?key=JdbYq0IOmnjd0Jgw8cH7\"\r\n            tileSize={512}\r\n            zoomOffset={-1}\r\n            attribution='<a href=\"https://www.maptiler.com/copyright/\" target=\"_blank\">&copy; MapTiler</a> <a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">&copy; OpenStreetMap contributors</a>'\r\n          />\r\n  \r\n          {/* Display markers based on coordinates */}\r\n          {Object.entries(countryCoordinates).map(([countryName, coordinates]) => (\r\n            <Marker key={countryName} position={coordinates}>\r\n              \r\n              <Popup>\r\n                <strong>{countryName}</strong>\r\n              </Popup>\r\n            </Marker>\r\n          ))}\r\n        </MapContainer>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  export default Map;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}