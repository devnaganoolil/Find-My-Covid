{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dev Naganoolil\\\\Desktop\\\\Find-My-Covid\\\\src\\\\components\\\\Map.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Map = ({\n  center,\n  zoom\n}) => {\n  _s();\n  const [covidData, setCovidData] = useState([]);\n  const [countryCoordinates, setCountryCoordinates] = useState({});\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Fetch COVID-19 data\n        const response = await fetch('https://covid-19-tracking.p.rapidapi.com/v1', {\n          method: 'GET',\n          headers: {\n            'X-RapidAPI-Key': '156cf06ba4msh2c2cdb55142a549p162ba6jsncff6594c9c0b',\n            'X-RapidAPI-Host': 'covid-19-tracking.p.rapidapi.com'\n          }\n        });\n        if (!response.ok) {\n          throw new Error('Failed to fetch COVID-19 data');\n        }\n        const data = await response.json();\n        setCovidData(data);\n      } catch (error) {\n        console.error('Error fetching COVID-19 data:', error.message);\n      }\n    };\n    fetchData();\n  }, []);\n  useEffect(() => {\n    const fetchCoordinates = async () => {\n      const newCountryCoordinates = {};\n      for (const country of covidData) {\n        const countryName = country.Country_text;\n\n        // Use the countryName in the geocoding API\n        const url = `https://trueway-geocoding.p.rapidapi.com/Geocode?address=${encodeURIComponent(countryName)}`;\n        const options = {\n          method: 'GET',\n          headers: {\n            'X-RapidAPI-Key': '156cf06ba4msh2c2cdb55142a549p162ba6jsncff6594c9c0b',\n            'X-RapidAPI-Host': 'trueway-geocoding.p.rapidapi.com'\n          }\n        };\n        try {\n          var _result$results$;\n          const response = await fetch(url, options);\n          const result = await response.json();\n\n          // Extract the coordinates from the result\n          const coordinates = (_result$results$ = result.results[0]) === null || _result$results$ === void 0 ? void 0 : _result$results$.location;\n\n          // Store the coordinates in the object\n          newCountryCoordinates[countryName] = coordinates;\n          console.log(`Geocoding result for ${countryName}:`, coordinates);\n        } catch (error) {\n          console.error(`Error geocoding for ${countryName}:`, error);\n        }\n\n        // Introduce a delay of 5 seconds\n        await new Promise(resolve => setTimeout(resolve, 5000));\n      }\n\n      // Update the state with the new coordinates\n      setCountryCoordinates(newCountryCoordinates);\n    };\n\n    // Fetch coordinates when covidData changes\n    if (covidData.length > 0) {\n      fetchCoordinates();\n    }\n  }, [covidData]);\n  console.log('Map component covidData:', covidData);\n  console.log('Country Coordinates:', countryCoordinates);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map\",\n    children: /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: center,\n      zoom: zoom,\n      minZoom: 3,\n      worldCopyJump: true,\n      maxBoundsViscosity: 1.0,\n      style: {\n        height: '500px',\n        width: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://api.maptiler.com/maps/basic-v2/{z}/{x}/{y}.png?key=JdbYq0IOmnjd0Jgw8cH7\",\n        tileSize: 512,\n        zoomOffset: -1,\n        attribution: \"<a href=\\\"https://www.maptiler.com/copyright/\\\" target=\\\"_blank\\\">\\xA9 MapTiler</a> <a href=\\\"https://www.openstreetmap.org/copyright\\\" target=\\\"_blank\\\">\\xA9 OpenStreetMap contributors</a>\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), Object.entries(countryCoordinates).map(([countryName, coordinates]) => /*#__PURE__*/_jsxDEV(Marker, {\n        position: coordinates,\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: countryName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this)\n      }, countryName, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n\n// Default Map props if none are specified\n_s(Map, \"CMpNTiKv0T0YMxTCYeG+btKapMU=\");\n_c = Map;\nMap.defaultProps = {\n  center: {\n    lat: 37.0902,\n    lng: -95.7129\n  },\n  zoom: 4\n};\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useEffect","useState","MapContainer","TileLayer","Marker","Popup","jsxDEV","_jsxDEV","Map","center","zoom","_s","covidData","setCovidData","countryCoordinates","setCountryCoordinates","fetchData","response","fetch","method","headers","ok","Error","data","json","error","console","message","fetchCoordinates","newCountryCoordinates","country","countryName","Country_text","url","encodeURIComponent","options","_result$results$","result","coordinates","results","location","log","Promise","resolve","setTimeout","length","className","children","minZoom","worldCopyJump","maxBoundsViscosity","style","height","width","tileSize","zoomOffset","attribution","fileName","_jsxFileName","lineNumber","columnNumber","Object","entries","map","position","_c","defaultProps","lat","lng","$RefreshReg$"],"sources":["C:/Users/Dev Naganoolil/Desktop/Find-My-Covid/src/components/Map.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\nconst Map = ({ center, zoom }) => {\r\n  const [covidData, setCovidData] = useState([]);\r\n  const [countryCoordinates, setCountryCoordinates] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        // Fetch COVID-19 data\r\n        const response = await fetch('https://covid-19-tracking.p.rapidapi.com/v1', {\r\n          method: 'GET',\r\n          headers: {\r\n            'X-RapidAPI-Key': '156cf06ba4msh2c2cdb55142a549p162ba6jsncff6594c9c0b',\r\n            'X-RapidAPI-Host': 'covid-19-tracking.p.rapidapi.com',\r\n          },\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch COVID-19 data');\r\n        }\r\n\r\n        const data = await response.json();\r\n        setCovidData(data);\r\n      } catch (error) {\r\n        console.error('Error fetching COVID-19 data:', error.message);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchCoordinates = async () => {\r\n      const newCountryCoordinates = {};\r\n\r\n      for (const country of covidData) {\r\n        const countryName = country.Country_text;\r\n\r\n        // Use the countryName in the geocoding API\r\n        const url = `https://trueway-geocoding.p.rapidapi.com/Geocode?address=${encodeURIComponent(countryName)}`;\r\n        const options = {\r\n          method: 'GET',\r\n          headers: {\r\n            'X-RapidAPI-Key': '156cf06ba4msh2c2cdb55142a549p162ba6jsncff6594c9c0b',\r\n            'X-RapidAPI-Host': 'trueway-geocoding.p.rapidapi.com'\r\n          }\r\n        };\r\n\r\n        try {\r\n          const response = await fetch(url, options);\r\n          const result = await response.json();\r\n\r\n          // Extract the coordinates from the result\r\n          const coordinates = result.results[0]?.location;\r\n\r\n          // Store the coordinates in the object\r\n          newCountryCoordinates[countryName] = coordinates;\r\n\r\n          console.log(`Geocoding result for ${countryName}:`, coordinates);\r\n        } catch (error) {\r\n          console.error(`Error geocoding for ${countryName}:`, error);\r\n        }\r\n\r\n        // Introduce a delay of 5 seconds\r\n        await new Promise(resolve => setTimeout(resolve, 5000));\r\n      }\r\n\r\n      // Update the state with the new coordinates\r\n      setCountryCoordinates(newCountryCoordinates);\r\n    };\r\n\r\n    // Fetch coordinates when covidData changes\r\n    if (covidData.length > 0) {\r\n      fetchCoordinates();\r\n    }\r\n  }, [covidData]);\r\n\r\n  console.log('Map component covidData:', covidData);\r\n  console.log('Country Coordinates:', countryCoordinates);\r\n\r\n  return (\r\n    <div className=\"map\">\r\n      <MapContainer\r\n        center={center}\r\n        zoom={zoom}\r\n        minZoom={3}\r\n        worldCopyJump={true}\r\n        maxBoundsViscosity={1.0}\r\n        style={{ height: '500px', width: '100%' }}\r\n      >\r\n        <TileLayer\r\n          url=\"https://api.maptiler.com/maps/basic-v2/{z}/{x}/{y}.png?key=JdbYq0IOmnjd0Jgw8cH7\"\r\n          tileSize={512}\r\n          zoomOffset={-1}\r\n          attribution='<a href=\"https://www.maptiler.com/copyright/\" target=\"_blank\">&copy; MapTiler</a> <a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">&copy; OpenStreetMap contributors</a>'\r\n        />\r\n\r\n        {/* Display markers based on coordinates */}\r\n        {Object.entries(countryCoordinates).map(([countryName, coordinates]) => (\r\n          <Marker key={countryName} position={coordinates}>\r\n            <Popup>\r\n              <strong>{countryName}</strong>\r\n            </Popup>\r\n          </Marker>\r\n        ))}\r\n      </MapContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Default Map props if none are specified\r\nMap.defaultProps = {\r\n  center: {\r\n    lat: 37.0902,\r\n    lng: -95.7129,\r\n  },\r\n  zoom: 4,\r\n};\r\n\r\nexport default Map;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}